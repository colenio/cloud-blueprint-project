name: _build

on: # https://docs.github.com/en/actions/learn-github-actions/reusing-workflows
  workflow_call:
    inputs:
      runs-on:
        description: The default build-agent
        type: string
        required: false
        # See https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        default: "ubuntu-latest"
      component:
        description: The component to build & deploy
        type: string
        required: true
      cr:
        # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry
        description: The container registry to use (default is GitHub)
        type: string
        required: false
        default: ghcr.io
      cr_user:
        # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#authenticating-to-the-container-registry
        description: The container registry user (default is the GitHub actor)
        type: string
        required: false
        default: ${{ github.actor }}
    # https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#using-outputs-from-a-reusable-workflow
    outputs:
      version:
        description: The built version
        value: ${{ jobs.version.outputs.semver }}
    secrets:
      crToken:
        required: true

# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#defaults
defaults:
  run:
    shell: bash

# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#env
env:
  COMPONENT: ${{ inputs.component }}

# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobs
jobs:
  version:
    runs-on: ${{ inputs.runs-on }}
    outputs: # NOTE: We need the output in other jobs
      semver: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - name: Install GitVersion
        # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/setup.md#example-1
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: "6.3.x"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # For gitversion
      # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/index.md
      - id: gitversion
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v3.1.3
        with:
          useConfigFile: true

  build:
    runs-on: ${{ inputs.runs-on }}
    needs: version
    env:
      CR_BASE: "${{ inputs.cr }}/${{ github.repository }}"
      GITVERSION_SEMVER: ${{ needs.version.outputs.semver }}
      GIT_COMMIT: ${{ github.sha }}
      BUILD_VERSION: ${{ needs.version.outputs.semver }}
      DOCKER_CLI_HINTS: false
      BUILDKIT_PROGRESS: plain
      COMPOSE_BAKE: true
    steps:
      #------
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Build Container Image
        run: |
          export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          docker compose build ${COMPONENT}
      - name: Check Branch
        id: check-branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "This is not the main branch, skipping push."
            echo "is_main=false" >> $GITHUB_OUTPUT
          else
            echo "is_main=true" >> $GITHUB_OUTPUT
          fi

      - name: Push Container Image
        if: steps.check-branch.outputs.is_main == 'true'
        run: |
          echo "Pushing image ${CR_BASE}/${COMPONENT}:${BUILD_VERSION}"
          echo ${{ secrets.crToken }} | docker login ${CR_BASE} -u ${{ inputs.cr_user }} --password-stdin
          docker compose push ${COMPONENT} --quiet
          echo "Tagging image ${CR_BASE}/${COMPONENT}:${BUILD_VERSION} as latest"
          docker tag ${CR_BASE}/${COMPONENT}:${BUILD_VERSION} ${CR_BASE}/${COMPONENT}:latest
          docker push ${CR_BASE}/${COMPONENT}:latest --quiet

      - name: Check Helm Chart
        id: check-helm
        run: |
          if [ -d "charts/${{ inputs.component }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Build Helm Chart
        if: steps.check-helm.outputs.exists == 'true'
        working-directory: charts/${{ inputs.component }}
        run: |
          helm lint .
          if [ -d "charts" ]; then
            helm dependency update
          fi
          if [ -d "tests" ]; then
            echo "Running Helm unit tests"
            helm plugin install https://github.com/helm-unittest/helm-unittest.git
            helm unittest -o tests/TEST-helm.xml -t JUnit .
          fi
      - name: Push Helm Chart
        if: steps.check-helm.outputs.exists == 'true' && steps.check-branch.outputs.is_main == 'true'
        working-directory: charts/${{ inputs.component }}
        run: |
          echo "Pushing Helm chart ${COMPONENT} version ${BUILD_VERSION}"
          helm package --version=${BUILD_VERSION} --app-version=${BUILD_VERSION} .
          echo ${{ secrets.crToken }} | helm registry login -u ${{ inputs.cr_user }} --password-stdin ${{ inputs.cr }}
          helm push ${COMPONENT}-${BUILD_VERSION}.tgz oci://${{ inputs.cr }}/${{ github.repository }}/helm
